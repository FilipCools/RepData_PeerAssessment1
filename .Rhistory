qnorm(0.95)
qnorm(0.95)*75+1100
qnorm(0.95)*7,5+1100
qnorm(0.95)*7.5+1100
0.5^5
5*0.5^5
%+0.03125
0.15625+0.03125
qpois
qpois(10/3,5)
qpois(3.3333,5)
?qpois
?ppois
ppois(10/3,5)
ppois(10,15)
rexp(0.2)
?rexp
rexp(1,0.2)
rexp(1,0.2)
rexp(1,0.2)
hist(rexp(100,.2))
hist(rexp(1000,.2))
hist(rexp(10000,.2))
data<-null; for (i in 1..1000) data<-c(data,mean(rexp(40,0.2)))
data<-NULL; for (i in 1..1000) data<-c(data,mean(rexp(40,0.2)))
data<-NULL; for (i in 1:1000) data<-c(data,mean(rexp(40,0.2)))
hist(data)
plot(pnorm(5,5/sqrt(40)))
plot(qnorm(5,5/sqrt(40)))
qnorm
? qnorm
dnorm(5,5)
plot(dnorm)
plot(pnorm)
plot(pnorm(5,2))
plot(pnorm()
Q
plot(pnorm())
plot(pnorm
)
hist(data)
s<-seq(2, 8, length=100)
ns<-pnorm(s)
plot(s,ns)
ns<-qnorm(s)
ns<-pnorm(s,5,1)
plot(s,ns)
ns<-qnorm(s,5,1)
plot(s,ns)
qnrom(3,5,1)
qnorm(3,5,1)
pnorm(3,5,1)
ns<-pnorm(s,5,1)
plot(s,ns)
ns<-dnorm(s,5,1)
plot(s,ns)
plot(s,ns,lty=line)
plot(s,ns,type=line)
plot(s,ns,type="l")
hist(data)
5/sqrt(40)
ns<-dnorm(s,5,5/sqrt(40))
plot(s,ns,type="l")
?dnorm
ns<-dnorm(s,5,1)
setwd("C:/Users/01444687/Dropbox/jaartje Zuid-Afrika/curcussen statistiek/Coursera/Reproducible Research/Project 1/RepData_PeerAssessment1")
data <- read.csv("activity/activity")
data<-read.csv(unz("activity.zip", "activity.txt"), header=T,sep=";",
na.strings="NA")
data<-read.csv(unz("activity.zip", "activity.csv"), header=T,sep=";",
na.strings="NA")
head(data)
data<-read.csv(unz("activity.zip", "activity.csv"), header=T,sep=",",
na.strings="NA")
head(data)
str(data)
data$data <- as.Date(data$date)
str(data)
data$date <- as.Date(data$date)
str(data)
names(data)
summary(data)
tapply(data$steps,factor(data$date),sum)
? tapply
tapply(data$steps,factor(data$date),sum,na.rm=true)
tapply(data$steps,factor(data$date),sum,na.rm=TRUE)
?hist
?rep
?steps
tapply(data$steps,factor(data$date),sum)
?tapply
steps_per_day <- tapply(data[data$steps!="NA"]$steps,factor(data$date),sum)
steps_per_day <- tapply(data[data$steps!="NA",]$steps,factor(data$date),sum)
steps_per_day
datarm<-data[!is.na(data$steps),]
steps_per_day <- tapply(data$steps,factor(data$date),sum,na.rm=TRUE)
steps_per_day
data<-read.csv(unz("activity.zip", "activity.txt"), header=T,sep=";",
+                   na.strings="NA")
data<-read.csv(unz("activity.zip", "activity.txt"), header=T,sep=";",
na.strings="NA")
data<-read.csv(unz("activity.zip", "activity.csv"), header=T,sep=";",
na.strings="NA")
head(data)
data<-read.csv(unz("activity.zip", "activity.csv"), header=T,sep=",",
na.strings="NA")
head(data)
subdata <- data[data$date="2012-10-01",]$steps
subdata <- data[data$date=="2012-10-01",]$steps
sum(is.na(subdata))
steps_per_day <- tapply(data$steps,factor(data$date),sum)
steps_per_day
summary(data)
str(data)
unique(data$interval)
as.POSIXlt(100)
as.POSIXlt("100")
as.POSIXct("100")
as.POSIXlt("100",GMT)
as.POSIXlt("100","%H%M")
as.POSIXlt("0100","%H%M")
as.POSIXlt("0100","%h%m")
averagedaily <- tapply(data$steps,factor(data$interval),sum,na.rm=TRUE)
head(averagedaily)
str(averagedaily)
head(data$interval,n=10)
head(data$interval,n=20)
?rem
100 %% 60
100 %% 100
60*(105 %/% 100)+(105 %% 100)
?plot
?par
8*288
data <-read.csv(unz("activity.zip","activity.csv"), header=T, sep=",", na.strings="NA")
nacount <- function(x){ sum(is.na(x)) }
nacount(data$steps)
tapply(data$steps,factor(data$date),nacount)
weekdays("2012-11-06")
weekdays(as.Date("2012-11-06"))
weekdays(as.Date("2012-11-07"))
vec <- 1:10
vec
vec[5] <- "NA"
vec
if(vec == "NA"){vec<-5}
if(is.na(vec)){vec<-5}
vec[is.na(vec)]<- 5
vec
vec[is.na(vec)]<- 5
vec
is.na(vec)
is.NA(vec)
is.na(vec)
vec[5]<- NA
is.na(vec)
vec[is.na(vec)]<- 5
vec
data$steps[data$date == "2012-10-22" & data$interval == "5"]
data$steps[data$date == "2012-10-22" & data$interval == "205"]
data$steps[data$date == "2012-10-22" & data$interval == "405"]
data$steps[data$date == "2012-10-22" & data$interval == "605"]
data$steps[data$date == "2012-10-21" & data$interval == "605"]
data$steps[data$date == "2012-10-21" & data$interval == "65"]
data$steps[data$date == "2012-10-21" & data$interval == "650"]
for (i %in% c(1,3,7)){vec[i]<- 2}
for (i in c(1,3,7)){vec[i]<- 2}
vec
length(data)
nrows(data)
nrow(data)
averagedaily
averagedaily[5]
str(averagedaily)
summary(averagedaily)
averagedaily[1]
averagedaily[1,2]
averagedaily[1]*5
str(averagedaily)
dimnames(averagedaily)
averagedaily[[1]][2]
averagedaily[[1]][1]
as.vector(averagedaily)
as.data.frame(averagedaily)
names(averagedaily)
averagedaily <- tapply(data$steps,factor(data$interval),sum,na.rm=TRUE)
class(averagedaily)
head(averagedaily)
averagedaily[1,]
averagedaily[1]
as.data.frame(averagedaily)
averagedaily[1,]
class(averagedaily)
dimensions(averagedaily)
dim(averagedaily)
averagedaily[5]
averagedaily <- tapply(data$steps,factor(data$interval),sum,na.rm=TRUE)
averagedaily <- data.frame(interval=unique(data$interval),steps=averagedaily)
head(averagedaily)
data <-read.csv(unz("activity.zip","activity.csv"), header=T, sep=",", na.strings="NA")
head(data)
str(data)
averagedaily <- tapply(data$steps,factor(data$interval),sum,na.rm=TRUE)
head(averagedaily)
class(averagedaily)
? array
averagedaily[1,1]
dim(averagedaily)
averagedaily[1]
dimnames(averagedaily)
averagedaily$1000
averagedaily$"1000"
dim(dimnames(averagedaily))
class(dimnames(averagedaily))
dimnames(averagedaily[[1]])
dimnames(averagedaily)[[1]]
?array
averagedaily[0]
averagedaily[1]
averagedaily[20/5+1]
weekdays()
weekdays(as.Date("2014-11-10"))
weekdays(as.Date("2014-11-09"))
weekdays(as.Date("2014-11-08"))
imputed_data <- data
for (i in 1:nrow(imputed_data)) {
if (is.na(imputed_data$steps[i])) {
imputed_data$steps[i] <- averagedaily[(imputed_data$interval[i]/5)+1]
}
}
summary(imputed_data)
nacount <- function(x){ sum(is.na(x)) }
nacount(imputed_data$steps)
unique(data$date)
61*24*12
896/24
head(imputed_data)
? axis
max(vec)
max(averagedaily)
averagedaily <- tapply(data$steps,factor(data$interval),mean,na.rm=TRUE)
max(averagedaily)
head(averagedaily)
class(averagedaily)
max_interval <- NULL
for (i in 1:length(averagedaily)) {
if (averagedaily[i]==max(averagedaily)) {
max_interval <- i
}
}
max_interval
intervals <- unique(data$interval)
max_interval <- intervals[i]
max_interval
intervals <- unique(data$interval)
head(intervals)
intervals[104]
max_interval <- NULL
for (i in 1:length(averagedaily)) {
if (averagedaily[i]==max(averagedaily)) {
max_interval <- i
}
}
max_interval <- intervals[i]
max_interval
max_i <- NULL
for (i in 1:length(averagedaily)) {
if (averagedaily[i]==max(averagedaily)) {
max_i <- i
}
}
intervals[max_i]
?max
max_i
intervals[104]
8*12+8
which.max(averagedaily)
